#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Copyright (c) 2017 Fabrice Laporte - kray.me
# The MIT License http://www.opensource.org/licenses/mit-license.php

"""Fetch public emails from github repository stargazers/collaborators/etc
"""

from __future__ import print_function
import click
import getpass
import re
import sys

from github3 import login as gh_login


__version__ = '0.1.0'

MAIL_REGEX = re.compile(("([a-z0-9!#$%&'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+\/=?^_`"
    "{|}~-]+)*(@|\sat\s)(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?(\.|"
    "\sdot\s))+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?)"))
ROLES = {'s': 'stargazer',
    'c': 'collaborator',
    'i': 'issue'}


def printmp(msg):
    """Print temporarily, until next print overrides it.
    """
    filler = (80 - len(msg)) * ' '
    print(msg + filler, end='\r')
    sys.stdout.flush()


def contacts(github, logins):
    """Extract public contact info from users.
    """
    printmp('Fetching contacts')
    users = [github.user(login).as_dict() for login in logins]
    mails = set()
    blogs = set()
    for user in users:
        contact = user.get('name', 'login')
        if user['email']:
            contact += ' <%s>' % user['email']
            mails.add(contact)
        elif user['blog']:
            contact += ' <%s>' % user['blog']
            blogs.add(contact)
        else:
            continue
    return mails, blogs


def extract_mail(issues):
    """Extract mails that sometimes leak from issue comments.
    """
    contacts = set()
    for idx, issue in enumerate(issues):
        printmp('Fetching issue #%s' % idx)
        for comment in issue.comments():
            comm = comment.as_dict()
            emails = list(email[0] for email in re.findall(MAIL_REGEX, comm['body'])
                if not email[0].startswith('//') and not email[0].endswith('github.com') and
                '@' in email[0])
            contacts |= set(emails)
    return contacts


def fetch_logins(roles, repo):
    """Fetch logins for users with given roles.
    """
    users = set()
    if 'stargazer' in roles:
        printmp('Fetching stargazers')
        users |= set(repo.stargazers())
    if 'collaborator' in roles:
        printmp('Fetching collaborators')
        users |= set(repo.collaborators())
    if 'issue' in roles:
        printmp('Fetching issues creators')
        users |= set([i.user for i in repo.issues(state='all')])
    return users


@click.command(context_settings=dict(help_option_names=['-h', '--help']),
    help=__doc__)
@click.option('--login', '-l', help='Github.com login', prompt=True)
@click.option('--with-blog', '-b', is_flag=True, help=('When user has no email, print blog '
    'instead when available.'), default=False)
@click.option('--as-list', is_flag=True, help=('Print addresses as a comma separated list, as '
    "used in emails 'To:' field"), default=False)
@click.option('--role', '-r', type=click.Choice(ROLES), multiple=True, default=ROLES,
    help=('Classes of users to consider: s (stargazers), c (collaborators), '
        'i (issues participants). DEFAULT: all'))
@click.argument('repo_name')
@click.version_option(__version__)
def high_cli(repo_name, login, with_blog, as_list, role):
    """Extract mails from stargazers, collaborators and people involved with issues of given
    repository.
    """
    passw = getpass.getpass()
    github = gh_login(login, passw)
    repo = github.repository(login, repo_name)
    role = [ROLES[k] for k in role]
    users = fetch_logins(role, repo)
    mails, blogs = contacts(github, users)

    if 'issue' in role:
        mails |= extract_mail(repo.issues(state='all'))

    # Print results
    sep = ', ' if as_list else '\n'
    print(sep.join(mails))
    if with_blog:
        print(sep.join(blogs))


if __name__ == '__main__':
    high_cli()
